# -*- coding: utf-8 -*-
"""DERS15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17gR8ABc7NWuQj7Uhu1_niJlFjhh35c_8
"""

import sqlite3

conn = sqlite3.connect('ornek.db')
c = conn.cursor()

c.execute(''' CREATE TABLE IF NOT EXISTS users
                (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')

conn.commit()

def add_user(name,age):
    with conn:
        c.execute("INSERT INTO users(name,age) VALUES (?,?)", (name,age))

def update_user(user_id,name,age):
    with conn:
        c.execute("UPDATE users SET name = ?, age= ? WHERE id=?", (name,age,user_id))

def delete_users(user_id):
    with conn:
        c.execute("DELETE FROM users WHERE id=? ", (user_id,))

def get_users():
    c.execute("SELECT * FROM users")
    return c.fetchall()


add_user('Mete',40)
add_user('Ferhat',44)

update_user(1,'Mete Yaganoglu',39)

users = get_users()
for i in users:
    print(i)

delete_users(2)

users = get_users()
for i in users:
    print(i)

conn.close()

!pip install thinter

import sqlite3
import tkinter as tk
from tkinter import messagebox

conn = sqlite3.connect('products.db')

c = conn.cursor()

c.execute(''' CREATE TABLE IF NOT EXISTS products
                (id INTEGER PRIMARY KEY, name TEXT, price REAL, quantity INTEGER)''')

conn.commit()

def add_product(name,price,quantity):
    with conn:
        c.execute("INSERT INTO products(name,price,quantity) VALUES (?,?,?)", (name,price,quantity))
    messagebox.showinfo("Başarılı","ürün eklendi")

def update_product(product_id,name,price,quantity):
    with conn:
        c.execute("UPDATE products SET name = ?, price= ?, quantity=? WHERE id=?", (name,price,quantity,product_id))
    messagebox.showinfo("Başarılı","ürün güncellendi")

def delete_product(product_id):
    with conn:
        c.execute("DELETE FROM products WHERE id=?", (product_id,))
    messagebox.showinfo("Başarılı","ürün silindi")

def get_product():
    c.execute("SELECT * FROM products")
    return c.fetchall()


class ProductApp:
    def __init__(self,root):
        self.root=root
        self.root.title("Ürün Yönetim Sistemi")
        self.name_label = tk.Label(root, text="Ürün Adı")
        self.name_label.grid(row=0,column=0)
        self.name_entry = tk.Entry(root)
        self.name_entry.grid(row=0,column=1)


        self.price_label = tk.Label(root, text="Fiyat")
        self.price_label.grid(row=1,column=0)
        self.price_entry = tk.Entry(root)
        self.price_entry.grid(row=1,column=1)


        self.quantity_label = tk.Label(root, text="Miktar")
        self.quantity_label.grid(row=2,column=0)
        self.quantity_entry = tk.Entry(root)
        self.quantity_entry.grid(row=2,column=1)


        self.add_button = tk.Button(root,text="Ekle",command=self.add_product)
        self.add_button.grid(row=3,column=0, pady=10)


        self.update_button = tk.Button(root,text="Güncelle",command=self.update_product)
        self.update_button.grid(row=3,column=1)


        self.delete_button = tk.Button(root,text="Sil",command=self.delete_product)
        self.delete_button.grid(row=3,column=2)

        self.show_button = tk.Button(root,text="Ürünleri Göster",command=self.show_products)
        self.show_button.grid(row=4,column=0,columnspan=3, pady=10)


        self.product_list =tk.Listbox(root,width=50)
        self.product_list.grid(row=5,column=0,columnspan=3)


    def add_product(self):
        name=self.name_entry.get()
        price = float(self.price_entry.get())
        quantity =int(self.quantity_entry.get())
        add_product(name,price,quantity)
        self.show_products()

    def update_product(self):
        selected_item = self.product_list.curselection()
        if selected_item:
            product_id = self.product_list.get(selected_item).split()[0]
            name = self.name_entry.get()
            price = float(self.price_entry.get())
            quantity = int(self.quantity_entry.get())
            update_product(product_id, name, price, quantity)
            self.show_products()

    def delete_product(self):
        selected_item = self.product_list.curselection()
        if selected_item:
            product_id = self.product_list.get(selected_item).split()[0]
            delete_product(product_id)
            self.show_products()

    def show_products(self):
        self.product_list.delete(0, tk.END)
        products = get_product()
        for product in products:
            self.product_list.insert(tk.END, f"{product[0]} {product[1]},{product[2]} {product[3]}")



if __name__ == "__main__":
    root=tk.Tk()
    app = ProductApp(root)
    root.mainloop()

import sqlite3
import tkinter as tk
from tkinter import messagebox

# Veritabanı bağlantısı ve tablo oluşturma
conn = sqlite3.connect('products.db')
c = conn.cursor()
c.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY,
    name TEXT,
    price REAL,
    quantity INTEGER
)
''')
conn.commit()

# Veri ekleme fonksiyonu
def add_product(name, price, quantity):
    with conn:
        c.execute("INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)", (name, price, quantity))
        messagebox.showinfo("Başarılı", "Ürün eklendi")

# Veri güncelleme fonksiyonu
def update_product(product_id, name, price, quantity):
    with conn:
        c.execute("UPDATE products SET name = ?, price = ?, quantity = ? WHERE id = ?", (name, price, quantity, product_id))
        messagebox.showinfo("Başarılı", "Ürün güncellendi")

# Veri silme fonksiyonu
def delete_product(product_id):
    with conn:
        c.execute("DELETE FROM products WHERE id = ?", (product_id,))
        messagebox.showinfo("Başarılı", "Ürün silindi")

# Ürünleri çekme fonksiyonu
def get_products():
    c.execute("SELECT * FROM products")
    return c.fetchall()

# GUI sınıfı
class ProductApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ürün Yönetim Sistemi")

        # Giriş alanları
        self.name_label = tk.Label(root, text="Ürün Adı")
        self.name_label.grid(row=0, column=0)
        self.name_entry = tk.Entry(root)
        self.name_entry.grid(row=0, column=1)

        self.price_label = tk.Label(root, text="Fiyat")
        self.price_label.grid(row=1, column=0)
        self.price_entry = tk.Entry(root)
        self.price_entry.grid(row=1, column=1)

        self.quantity_label = tk.Label(root, text="Miktar")
        self.quantity_label.grid(row=2, column=0)
        self.quantity_entry = tk.Entry(root)
        self.quantity_entry.grid(row=2, column=1)

        # Butonlar
        self.add_button = tk.Button(root, text="Ekle", command=self.add_product)
        self.add_button.grid(row=3, column=0, pady=10)

        self.update_button = tk.Button(root, text="Güncelle", command=self.update_product)
        self.update_button.grid(row=3, column=1)

        self.delete_button = tk.Button(root, text="Sil", command=self.delete_product)
        self.delete_button.grid(row=3, column=2)

        self.show_button = tk.Button(root, text="Ürünleri Göster", command=self.show_products)
        self.show_button.grid(row=4, column=0, columnspan=3, pady=10)

        # Listbox
        self.product_list = tk.Listbox(root, width=50)
        self.product_list.grid(row=5, column=0, columnspan=3)

    def add_product(self):
        name = self.name_entry.get()
        price = float(self.price_entry.get())
        quantity = int(self.quantity_entry.get())
        add_product(name, price, quantity)
        self.show_products()

    def update_product(self):
        selected_item = self.product_list.curselection()
        if selected_item:
            product_id = self.product_list.get(selected_item).split()[0]
            name = self.name_entry.get()
            price = float(self.price_entry.get())
            quantity = int(self.quantity_entry.get())
            update_product(product_id, name, price, quantity)
            self.show_products()

    def delete_product(self):
        selected_item = self.product_list.curselection()
        if selected_item:
            product_id = self.product_list.get(selected_item).split()[0]
            delete_product(product_id)
            self.show_products()

    def show_products(self):
        self.product_list.delete(0, tk.END)
        products = get_products()
        self.product_list.insert(tk.END, f"{'ID':<5} {'Name':<20} {'Price':<10} {'Quantity':<10}")
        self.product_list.insert(tk.END, "-" * 50)
        for product in products:
            self.product_list.insert(tk.END, f"{product[0]:<5} {product[1]:<20} {product[2]:<10} {product[3]:<10}")

# Ana uygulama
if __name__ == "__main__":
    root = tk.Tk()
    app = ProductApp(root)
    root.mainloop()


# -*- coding: utf-8 -*-
"""PythonProgramlamaDersi13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iW7qdLK4vO_6I5HG60N_eS6LI2ya3cQq
"""

calisan1=["bilgisayar mühendisi","mete",35,"senior",50000]
calisan2=["bilgisayar mühendisi","ferhat",40,"junior",40000]

class BilgisayarMuhendisi:
  ozellik="pyhon biliyorlar"

  def __init__(self,isim,yas,pozisyon,maas):
    self.isim=isim
    self.yas=yas
    self.pozisyon=pozisyon
    self.maas=maas

calisan1=["bilgisayar mühendisi","mete",35,"senior",50000]
calisan2=["bilgisayar mühendisi","ferhat",40,"junior",40000]

calisan1.isim



calisan2.ozellik

calisan3=["bilgisayar mühendisi","batu",40,"junior",40000]

def code(calisan):
  return f'{calisan3[1]} kodu yazmaktadır.'

code(calisan3)

class BilgisayarMuhendisi:
  ozellik="pyhon biliyorlar"

  def __init__(self,isim,yas,pozisyon,maas):
    self.isim=isim
    self.yas=yas
    self.pozisyon=pozisyon
    self.maas=maas

  def code(calisan):
   return f'{calisan3[1]} kodu yazmaktadır.'

  def dil(self,language):
   return f'{self.isim} kodu {language}diliyle yazılacaktır'


  def __str__(self):
    bilgi= f'{self.isim} {self.yas} yaşında {self.pozisyon} pozisyonunda çalışmaktadır ve maaşı {self.maas} TL dir.'
    return bilgi


  def __eq__(self,other):
    return self.isim == other.isim and self.yas == other.yas

    #static method (sadece kendi içinde kullanılıyor gixli bir method gibi düşünebiliriz.)
  @staticmethod
  def yasaGoreMaas(yas):
    if yas<30:
      return 30000
    elif yas<35:
      return 40000
    else:
      return 50000

c1=BilgisayarMuhendisi("mete",35,"senior",50000)
c2=BilgisayarMuhendisi("ferhat",40,"junior",40000)

c1.code

c1.dil('ptyhon')

c1.__str__()

c2.__str__()

print(c2)

c1==c2

c1=BilgisayarMuhendisi("mete",35,"senior",50000)
c2=BilgisayarMuhendisi("ferhat",40,"junior",40000)

if c1==c2:
  print("çalışan aynı")
else:
  print("çalışnan farklıdır")

c1=BilgisayarMuhendisi("mete",35,"senior",50000)
c2=BilgisayarMuhendisi("ferhat",35,"junior",40000)

if c1==c2:
  print("çalışan aynı")
else:
  print("çalışnan farklıdır")

c1.maas

c2.maas

c1.yasaGoreMaas(30)

c1.maas

c2.yasaGoreMaas(35)

BilgisayarMuhendisi.yasaGoreMaas(25)

#süper metodu ile kalıtım

class calisan:
  def __init__(self,isim,yas,maas):
    self.isim=isim
    self.yas=yas
    self.maas=MagicAssign


  def kisi(self):
    return f'{self.isim} adlı kişi çalışmaktadır.'

class YazılımMuh(calisan):
  def __init__(self,isim,yas,maas,level):
    super().__init__(isim,yas,maas)
    self.level=level

  def kisi(self):
    return f'{self.isim} adlı kişi çalışmaktadır.'


class Designer(calisan):
  def cizen(self):
    return f'{self.isim} adlı kişi çizmektedir.'

  def kisi(self):
    return f'{self.isim} adlı kişi çi<mektedir.'

ym=YazılımMuh('mete',35,5000,'ceoa')

d=Designer("batu",45,55555)

d.kisi()

d.cizen()

#ileri seviye

calisanlar=[YazılımMuh("mete",35,5555,"ceo"),
            YazılımMuh("ferhat",40,6666,"senior"),
            Designer("batu",50,4666)]

def sonuclar(calisanlar:list):   #bu yapı çok önemli hoca kendisi kullanıyormuş
  for i in calisanlar:
    print(i.kisi())

sonuclar(calisanlar)

class SoftwareEngineer():
  def __init__(self,isim,yas,maas):
    self.isim=isim
    self.yas=yas
    self.maas=None
    self.projeSayisi=0

  def proje(self):
    self.projeSayisi +=1

  def maasGetir(self):
    return self.maas

  def hesapla(self,deger):                                   #ileri python seviyesi
    self.maas=self.maasHesapla(deger)

  def maasHesapla(self,deger):
    if self.projeSayisi< 5:
      return deger
    elif self.projeSayisi < 50:
      return deger*2
    else:
      return deger*5

se = SoftwareEngineer("mete",35)

se.isim

se.yas

print(se.maas)

se.projeSayisi

se.hesapla(50000)

se.maasGetir()

se.maas

for i in range (70):  #proje sayısını 70 yaptık
  se.proje()

se.projeSayisi  #70

se.hesapla(50000)

se.maasGetir()

se.maas

